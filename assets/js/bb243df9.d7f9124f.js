"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[9245],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),s=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(r),h=n,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return r?a.createElement(m,i(i({ref:t},p),{},{components:r})):a.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:n,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},5221:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_label:"Curator Cache"},i="Recipe: Curator Cache",c={unversionedId:"recipes-curator-cache",id:"recipes-curator-cache",title:"Recipe: Curator Cache",description:"CuratorCache requires ZooKeeper 3.6+",source:"@site/docs/recipes-curator-cache.md",sourceDirName:".",slug:"/recipes-curator-cache",permalink:"/docs/recipes-curator-cache",draft:!1,editUrl:"https://github.com/apache/curator-site/tree/main/docs/recipes-curator-cache.md",tags:[],version:"current",lastUpdatedBy:"Kezhu Wang",lastUpdatedAt:1692089714,formattedLastUpdatedAt:"Aug 15, 2023",frontMatter:{sidebar_label:"Curator Cache"},sidebar:"docs",previous:{title:"Distributed Atomic Long",permalink:"/docs/recipes-distributed-atomic-long"},next:{title:"Path Cache",permalink:"/docs/recipes-path-cache"}},l={},s=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Creating a CuratorCache",id:"creating-a-curatorcache",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Error Handling",id:"error-handling",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"recipe-curator-cache"},"Recipe: Curator Cache"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"CuratorCache requires ZooKeeper 3.6+")),(0,n.kt)("h2",{id:"description"},"Description"),(0,n.kt)("p",null,"A utility that attempts to keep the data from a node locally cached. Optionally the entire tree of children below the node can also be cached. Will respond to update/create/delete events, pull down the data, etc. You can register listeners that will get notified when changes occur."),(0,n.kt)("h2",{id:"participating-classes"},"Participating Classes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"CuratorCache"),(0,n.kt)("li",{parentName:"ul"},"CuratorCacheListener"),(0,n.kt)("li",{parentName:"ul"},"ChildData")),(0,n.kt)("h2",{id:"creating-a-curatorcache"},"Creating a CuratorCache"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// Parameters:\n// client - the client\n// path - path to watch\n// options - empty or one or more options\nCuratorCache build(CuratorFramework client, String path, Options... options);\n")),(0,n.kt)("p",null,"There is a builder factory available for additional options when building the cache instance. See ",(0,n.kt)("inlineCode",{parentName:"p"},"CuratorCacheBuilder")," for details."),(0,n.kt)("h2",{id:"general-usage"},"General Usage"),(0,n.kt)("p",null,"The cache must be started by calling ",(0,n.kt)("inlineCode",{parentName:"p"},"start()"),". Call ",(0,n.kt)("inlineCode",{parentName:"p"},"close()")," when you are through with the cache."),(0,n.kt)("p",null,"At any time, call the various accessor methods to get the current state of the cache. You can also register to be notified when a change occurs by calling ",(0,n.kt)("inlineCode",{parentName:"p"},"listenable()")," and then registering a listener for events."),(0,n.kt)("p",null,"See the examples for an example usage."),(0,n.kt)("h2",{id:"error-handling"},"Error Handling"),(0,n.kt)("p",null,"CuratorCache instances internally monitor connection losses, etc. automatically rebuilding the cache on reconnection."))}d.isMDXComponent=!0}}]);