"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[4367],{2534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>o,frontMatter:()=>i,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"recipes-tree-cache","title":"Recipe: Tree Cache","description":"Description","source":"@site/docs/recipes-tree-cache.md","sourceDirName":".","slug":"/recipes-tree-cache","permalink":"/docs/recipes-tree-cache","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/recipes-tree-cache.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1741313002000,"frontMatter":{"sidebar_label":"Tree Cache"},"sidebar":"docs","previous":{"title":"Node Cache","permalink":"/docs/recipes-node-cache"},"next":{"title":"Persistent Recursive Watcher","permalink":"/docs/recipes-persistent-watcher"}}');var r=n(5105),c=n(6413);const i={sidebar_label:"Tree Cache"},s="Recipe: Tree Cache",l={},h=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Creating a TreeCache",id:"creating-a-treecache",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Error Handling",id:"error-handling",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"recipe-tree-cache",children:"Recipe: Tree Cache"})}),"\n",(0,r.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(t.p,{children:"A utility that attempts to keep all data from all children of a ZK path locally cached. This class will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can register a listener that will get notified when changes occur."}),"\n",(0,r.jsx)(t.h2,{id:"participating-classes",children:"Participating Classes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"TreeCache"}),"\n",(0,r.jsx)(t.li,{children:"TreeCacheListener"}),"\n",(0,r.jsx)(t.li,{children:"TreeCacheEvent"}),"\n",(0,r.jsx)(t.li,{children:"ChildData"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"creating-a-treecache",children:"Creating a TreeCache"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Parameters:\n// client - the client\n// path - path to watch\n// cacheData - if true, node contents are cached in addition to the stat\npublic TreeCache(CuratorFramework client, String path, boolean cacheData);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"general-usage",children:"General Usage"}),"\n",(0,r.jsxs)(t.p,{children:["The cache must be started by calling ",(0,r.jsx)(t.code,{children:"start()"}),". Call ",(0,r.jsx)(t.code,{children:"close()"})," when you are through with the cache."]}),"\n",(0,r.jsxs)(t.p,{children:["At any time, call ",(0,r.jsx)(t.code,{children:"getCurrentChildren()"})," to get the current state of the cache. Alternatively, call ",(0,r.jsx)(t.code,{children:"getCurrentData()"})," to get the data for a given path that's being monitored."]}),"\n",(0,r.jsxs)(t.p,{children:["You can also register to be notified when a change occurs by calling ",(0,r.jsx)(t.code,{children:"getListenable()"})," and then:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Add a change listener\n// Parameters:\n// listener - the listener\npublic void addListener(TreeCacheListener listener);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(t.p,{children:["TreeCache instances internally monitor a ",(0,r.jsx)(t.code,{children:"ConnectionStateListener"}),". If the connection state changes, the cache will receive messages detailing the change."]})]})}function o(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},6413:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(8101);const r={},c=a.createContext(r);function i(e){const t=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(c.Provider,{value:t},e.children)}}}]);