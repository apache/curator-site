"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[9856],{4610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"recipes-shared-reentrant-lock","title":"Recipe: Shared Reentrant Lock","description":"Description","source":"@site/docs/recipes-shared-reentrant-lock.md","sourceDirName":".","slug":"/recipes-shared-reentrant-lock","permalink":"/docs/recipes-shared-reentrant-lock","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/recipes-shared-reentrant-lock.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1741313002000,"frontMatter":{"sidebar_label":"Shared Reentrant Lock"},"sidebar":"docs","previous":{"title":"Leader Election","permalink":"/docs/recipes-leader-election"},"next":{"title":"Shared Lock","permalink":"/docs/recipes-shared-lock"}}');var r=n(5105),i=n(6413);const s={sidebar_label:"Shared Reentrant Lock"},c="Recipe: Shared Reentrant Lock",l={},o=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Create an InterProcessMutex",id:"create-an-interprocessmutex",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Revoking",id:"revoking",level:2},{value:"Error Handling",id:"error-handling",level:2}];function d(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"recipe-shared-reentrant-lock",children:"Recipe: Shared Reentrant Lock"})}),"\n",(0,r.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(t.p,{children:"Fully distributed locks that are globally synchronous, meaning at any snapshot in time no two clients think they hold the same lock."}),"\n",(0,r.jsx)(t.h2,{id:"participating-classes",children:"Participating Classes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"InterProcessMutex"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"create-an-interprocessmutex",children:"Create an InterProcessMutex"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Parameters:\n// client - client\n// path - the path to lock\npublic InterProcessMutex(CuratorFramework client, String path);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"general-usage",children:"General Usage"}),"\n",(0,r.jsx)(t.p,{children:"To acquire the lock, use one of the acquire methods:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Acquire the mutex - blocking until it's available. Note: the same thread can call acquire\n// re-entrantly. Each call to acquire must be balanced by a call to release()\npublic void acquire();\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Acquire the mutex - blocks until it's available or the given time expires. Note: the same thread can\n// call acquire re-entrantly. Each call to acquire that returns true must be balanced by a call to release()\n//\n// Parameters:\n// time - time to wait\n// unit - time unit\n// Returns:\n// true if the mutex was acquired, false otherwise\npublic boolean acquire(long time, TimeUnit unit);\n"})}),"\n",(0,r.jsx)(t.p,{children:"To release the mutex, call:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Perform one release of the mutex if the calling thread is the same thread that acquired it. If the\n// thread had made multiple calls to acquire, the mutex will still be held when this method returns.\npublic void release();\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"A InterProcessMutex instance is reusable. i.e. don't create a new instance every time. Re-use a single instance."})}),"\n",(0,r.jsx)(t.h2,{id:"revoking",children:"Revoking"}),"\n",(0,r.jsx)(t.p,{children:"InterProcessMutex supports a cooperative revocation mechanism as described on the ZooKeeper recipes wiki."}),"\n",(0,r.jsx)(t.p,{children:"To make a mutex revocable, call:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Make the lock revocable. Your listener will get called when another process/thread wants you to release the lock. Revocation is cooperative.\n// Parameters:\n// listener - the listener\npublic void makeRevocable(RevocationListener<T> listener);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["To ask for a lock to revoke/release, use the static method in the ",(0,r.jsx)(t.code,{children:"Revoker"})," class:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Utility to mark a lock for revocation. Assuming that the lock has been registered\n// with a RevocationListener, it will get called and the lock should be released. Note,\n// however, that revocation is cooperative.\n// Parameters:\n// client - the client\n// path - the path of the lock - usually from something like InterProcessMutex.getParticipantNodes()\npublic static void attemptRevoke(CuratorFramework client, String path) throws Exception;\n"})}),"\n",(0,r.jsx)(t.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(t.p,{children:["It is strongly recommended that you add a ",(0,r.jsx)(t.code,{children:"ConnectionStateListener"})," and watch for SUSPENDED and LOST state changes. If a SUSPENDED state is reported you cannot be certain that you still hold the lock unless you subsequently receive a RECONNECTED state. If a LOST state is reported it is certain that you no longer hold the lock."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},6413:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var a=n(8101);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);