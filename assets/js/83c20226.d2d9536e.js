"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[7753],{3881:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>s});var d=n(8101);const r={},o=d.createContext(r);function t(e){const a=d.useContext(o);return d.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),d.createElement(o.Provider,{value:a},e.children)}},6481:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"modeled-typed","title":"Modeled Curator - Caching, Typed Parameters and Versioning","description":"In addition to its main features Modeled Curator also supports integrated caching, typed parameters and versioning.","source":"@site/docs/modeled-typed.md","sourceDirName":".","slug":"/modeled-typed","permalink":"/docs/modeled-typed","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/modeled-typed.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1741315398000,"frontMatter":{"displayed_sidebar":"docs"},"sidebar":"docs"}');var r=n(5105),o=n(3881);const t={displayed_sidebar:"docs"},s="Modeled Curator - Caching, Typed Parameters and Versioning",i={},l=[{value:"Caching",id:"caching",level:2},{value:"Unresolved Paths and Caching",id:"unresolved-paths-and-caching",level:3},{value:"Typed Parameters",id:"typed-parameters",level:2},{value:"Versioning",id:"versioning",level:2}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"modeled-curator---caching-typed-parameters-and-versioning",children:"Modeled Curator - Caching, Typed Parameters and Versioning"})}),"\n",(0,r.jsxs)(a.p,{children:["In addition to its ",(0,r.jsx)(a.a,{href:"/docs/modeled-components",children:"main features"})," Modeled Curator also supports integrated caching, typed parameters and versioning."]}),"\n",(0,r.jsx)(a.h2,{id:"caching",children:"Caching"}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"ModeledFramework"})," instances can be wrapped with a facade that uses a Curator cache internally. All read operations use this cache instead of making direct ZooKeeper calls. You can also listen for node changes. E.g.,"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"ModeledFramework<MyModel> modeledClient = ModeledFramework.wrap(client, myModelSpec);\nCachedModeledFramework<MyModel> cached = modeledClient.cached();\ncached.start();\n\n// reads come from the cache\ncached.read().whenComplete(...) ...\n\ncached.listenable.addListener((type, path, stat, model) -> {\n    // type is NODE_ADDED, NODE_UPDATED, etc.\n});\n"})}),"\n",(0,r.jsx)(a.h3,{id:"unresolved-paths-and-caching",children:"Unresolved Paths and Caching"}),"\n",(0,r.jsx)(a.p,{children:"If the last node in the ModelSpec's path is a parameter, CachedModeledFramework will automatically listen to the parent path. E.g.,"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'ZPath path = ZPath.parseWithIds("/root/instance/{id}");\nModelSpec<MyModel> modelSpec = ModelSpec.builder(path, serializer);\nModeledFramework<MyModel> modeledClient = ModeledFramework.wrap(modelSpec, client, modelSpec);\n\nCachedModeledFramework<MyModel> cached = modeledClient.cached();\ncached.start(); // automatically listens to "/root/instance" and below\n'})}),"\n",(0,r.jsx)(a.h2,{id:"typed-parameters",children:"Typed Parameters"}),"\n",(0,r.jsxs)(a.p,{children:['The "resolve" methods in ZPath et al. consume untyped Objects. Ideally, we should be able to specify parameters in a strongly typed manner. Modeled Curator\'s "type" templates provide this. You can specify typed parameters for ZPaths, ModelSpecs and ModeledFramework. The ',(0,r.jsx)(a.a,{href:"https://github.com/apache/curator/tree/master/curator-examples/src/main/java/pubsub",children:"Pub-Sub Example"})," shows how to use typed parameters with ModeledFramework."]}),"\n",(0,r.jsxs)(a.p,{children:["Typed interfaces are provided for up to 10 parameters and are named ",(0,r.jsx)(a.code,{children:"TypedZPath"}),", ",(0,r.jsx)(a.code,{children:"TypedZPath2"}),", ",(0,r.jsx)(a.code,{children:"TypedModelSpec"}),", ",(0,r.jsx)(a.code,{children:"TypedModelSpec2"}),", ",(0,r.jsx)(a.code,{children:"TypedModeledFramework"}),", ",(0,r.jsx)(a.code,{children:"TypedModeledFramework2"}),", etc."]}),"\n",(0,r.jsx)(a.p,{children:"Here's an example of a TypedModeledFramework that models a Person and uses two parameters to generate the path, a Group and an Organization:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"TypedModeledFramework2<Person, Group, Organization> clientTemplate = TypedModeledFramework2.from(\n    ModeledFrameworkBuilder.build(),\n    personModelSpec\n);\n\n...\n\nGroup group = ...\nOrganization organization = ...\nModeledFramework<Person> modeledClient = clientTemplate.resolve(asyncClient, group, organization);\nclient.set(person);\n"})}),"\n",(0,r.jsx)(a.p,{children:"TypedZPath and TypedModelSpec work similarly."}),"\n",(0,r.jsx)(a.h2,{id:"versioning",children:"Versioning"}),"\n",(0,r.jsxs)(a.p,{children:["Modeled Curator supports associating a ZNode version with a model object via the ",(0,r.jsx)(a.code,{children:"Versioned"})," interface and the ",(0,r.jsx)(a.code,{children:"VersionedModeledFramework"})," APIs. To read a model along with its ZNode version use:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"ModeledFramework<Person> client = ...\n\nclient.versioned().read().whenComplete((value, e) -> {\n    if ( value != null ) {\n        // value's type is Versioned<Person>\n        Person personModel = value.model();\n        int znodeVersion = value.version();\n    }\n});\n"})}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"VersionedModeledFramework"})," has set/update APIs which automatically use the version from the ",(0,r.jsx)(a.code,{children:"Versioned"})," instance."]})]})}function p(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);