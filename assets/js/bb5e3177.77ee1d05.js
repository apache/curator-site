"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[5191],{6413:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var a=n(8101);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}},6740:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"recipes-shared-counter","title":"Recipe: Shared Counter","description":"Description","source":"@site/docs/recipes-shared-counter.md","sourceDirName":".","slug":"/recipes-shared-counter","permalink":"/docs/recipes-shared-counter","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/recipes-shared-counter.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1741313002000,"frontMatter":{"sidebar_label":"Shared Counter"},"sidebar":"docs","previous":{"title":"Double Barrier","permalink":"/docs/recipes-double-barrier"},"next":{"title":"Distributed Atomic Long","permalink":"/docs/recipes-distributed-atomic-long"}}');var r=n(5105),s=n(6413);const i={sidebar_label:"Shared Counter"},c="Recipe: Shared Counter",o={},d=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Creating a SharedCounter",id:"creating-a-sharedcounter",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Error Handling",id:"error-handling",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"recipe-shared-counter",children:"Recipe: Shared Counter"})}),"\n",(0,r.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(t.p,{children:"Manages a shared integer. All clients watching the same path will have the up-to-date value of the shared integer (considering ZK's normal consistency guarantees)."}),"\n",(0,r.jsx)(t.h2,{id:"participating-classes",children:"Participating Classes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"SharedCount"}),"\n",(0,r.jsx)(t.li,{children:"SharedCountReader"}),"\n",(0,r.jsx)(t.li,{children:"SharedCountListener"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"creating-a-sharedcounter",children:"Creating a SharedCounter"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Parameters:\n// client - the client\n// path - the shared path - i.e. where the shared count is stored\n// seedValue - the initial value for the count iff the path has not yet been created\npublic SharedCount(CuratorFramework client, String path, int seedValue);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"general-usage",children:"General Usage"}),"\n",(0,r.jsx)(t.p,{children:"SharedCounts must be started:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"count.start();\n"})}),"\n",(0,r.jsx)(t.p,{children:"When you are through with the instance, you should call close:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"count.close();\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Return the current value of the count\nint getCount();\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Add a listener for changes to the count\nvoid addListener(SharedCountListener listener);\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Change the shared count value irrespective of its previous state\npublic void setCount(int newCount);\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Changes the shared count only if its value has not changed since this client last read it. If the count\n// has changed, the value is not set and this client's view of the value is updated. i.e. if the count is\n// not successful you can get the updated value by calling getCount().\n// Parameters:\n// newCount - the new value to attempt\n// Returns:\n// true if the change attempt was successful, false if not. If the change was not successful, getCount()\n// will return the updated value\npublic boolean trySetCount(int newCount);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"SharedCountListener"})," class extends ",(0,r.jsx)(t.code,{children:"ConnectionStateListener"}),". When the SharedCount is started, it adds the listener to the Curator instance. Users of the ",(0,r.jsx)(t.code,{children:"SharedCount"})," must pay attention to any connection state changes."]}),"\n",(0,r.jsx)(t.p,{children:"If the SUSPENDED state is reported, the instance must assume that, until it receives a RECONNECTED state, the count is no longer accurate and isn't being updated. If the LOST state is reported, the count is permanently down."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);