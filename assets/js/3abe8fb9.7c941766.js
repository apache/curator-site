"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[5521],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),g=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=g(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=g(r),d=a,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var g=2;g<o;g++)i[g]=r[g];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3810:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>g});var n=r(7462),a=(r(7294),r(3905));const o={},i="Logging and Tracing",l={unversionedId:"logging",id:"logging",title:"Logging and Tracing",description:"Details",source:"@site/docs/logging.md",sourceDirName:".",slug:"/logging",permalink:"/docs/logging",draft:!1,editUrl:"https://github.com/apache/curator-site/tree/main/docs/logging.md",tags:[],version:"current",lastUpdatedBy:"dependabot[bot]",lastUpdatedAt:1698746944,formattedLastUpdatedAt:"Oct 31, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Error Handling",permalink:"/docs/errors"},next:{title:"Tech Notes",permalink:"/docs/tech-notes"}},c={},g=[{value:"Details",id:"details",level:2},{value:"Logging",id:"logging",level:2},{value:"Tracing",id:"tracing",level:2}],s={toc:g},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"logging-and-tracing"},"Logging and Tracing"),(0,a.kt)("h2",{id:"details"},"Details"),(0,a.kt)("p",null,"Curator is logging and tracing neutral. The Curator code is instrumented with logging and tracers but uses a driver mechanism that allows easy integration into your preferred logging and tracing frameworks."),(0,a.kt)("h2",{id:"logging"},"Logging"),(0,a.kt)("p",null,"Curator uses SLF4J (",(0,a.kt)("a",{parentName:"p",href:"https://www.slf4j.org/"},"https://www.slf4j.org/"),") for logging. SLF4J is a facade over logging that allows you to plug in any (or no) logging framework. See the SLF4J website for details."),(0,a.kt)("h2",{id:"tracing"},"Tracing"),(0,a.kt)("p",null,"Connect Curator tracing to your tracing framework via an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"TracerDriver")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"AdvancedTracerDriver"),". Curator calls the various methods (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"addTrace()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"addCount()"),") and your instance proxies the calls to your tracing framework. Inform Curator of your tracing driver instance by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"CuratorZookeeperClient.setTracerDriver()"),"."))}u.isMDXComponent=!0}}]);