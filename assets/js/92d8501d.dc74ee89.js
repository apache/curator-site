"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[2210],{6413:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(8101);const c={},r=a.createContext(c);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},7387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"recipes-node-cache","title":"Recipe: Node Cache","description":"Description","source":"@site/docs/recipes-node-cache.md","sourceDirName":".","slug":"/recipes-node-cache","permalink":"/docs/recipes-node-cache","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/recipes-node-cache.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1739752798000,"frontMatter":{"sidebar_label":"Node Cache"},"sidebar":"docs","previous":{"title":"Path Cache","permalink":"/docs/recipes-path-cache"},"next":{"title":"Tree Cache","permalink":"/docs/recipes-tree-cache"}}');var c=t(5105),r=t(6413);const i={sidebar_label:"Node Cache"},s="Recipe: Node Cache",d={},l=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Creating a NodeChildrenCache",id:"creating-a-nodechildrencache",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Error Handling",id:"error-handling",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"recipe-node-cache",children:"Recipe: Node Cache"})}),"\n",(0,c.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,c.jsx)(n.p,{children:"A Node Cache is used to watch a ZNode. Whenever the data is modified or the ZNode is deleted, the Node Cache will change its state to contain the current data (or null if ZNode was deleted)."}),"\n",(0,c.jsx)(n.h2,{id:"participating-classes",children:"Participating Classes"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"NodeCache"}),"\n",(0,c.jsx)(n.li,{children:"NodeCacheListener"}),"\n",(0,c.jsx)(n.li,{children:"ChildData"}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"creating-a-nodechildrencache",children:"Creating a NodeChildrenCache"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-java",children:"// Parameters:\n// client - the client\n// path - path to cache\npublic NodeCache(CuratorFramework client, String path);\n"})}),"\n",(0,c.jsx)(n.h2,{id:"general-usage",children:"General Usage"}),"\n",(0,c.jsxs)(n.p,{children:["The cache must be started by calling ",(0,c.jsx)(n.code,{children:"start()"}),". Call ",(0,c.jsx)(n.code,{children:"close()"})," when you are through with the cache."]}),"\n",(0,c.jsxs)(n.p,{children:["At any time, call ",(0,c.jsx)(n.code,{children:"getCurrentData()"})," to get the current state of the cache. You can also register to be notified when a change occurs by calling ",(0,c.jsx)(n.code,{children:"getListenable()"})," and then:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-java",children:"// Add a change listener\n// Parameters:\n// listener - the listener\npublic void addListener(NodeCacheListener listener);\n"})}),"\n",(0,c.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,c.jsxs)(n.p,{children:["NodeCache instances internally monitor a ",(0,c.jsx)(n.code,{children:"ConnectionStateListener"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(o,{...e})}):o(e)}}}]);