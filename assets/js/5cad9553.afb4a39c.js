"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[684],{9613:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var a=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),o=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},d=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=o(r),m=n,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||i;return r?a.createElement(h,u(u({ref:t},d),{},{components:r})):a.createElement(h,u({ref:t},d))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,u=new Array(i);u[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,u[1]=l;for(var o=2;o<i;o++)u[o]=r[o];return a.createElement.apply(null,u)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1436:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var a=r(7263),n=(r(9496),r(9613));const i={sidebar_label:"Distributed Queue"},u="Recipe: Distributed Queue",l={unversionedId:"recipes-distributed-queue",id:"recipes-distributed-queue",title:"Recipe: Distributed Queue",description:"We recommend that you do NOT use ZooKeeper for Queues. Please see Tech Note 4 for details.",source:"@site/docs/recipes-distributed-queue.md",sourceDirName:".",slug:"/recipes-distributed-queue",permalink:"/docs/recipes-distributed-queue",draft:!1,editUrl:"https://github.com/apache/curator-site/tree/main/docs/recipes-distributed-queue.md",tags:[],version:"current",lastUpdatedBy:"dependabot[bot]",lastUpdatedAt:1718429306,formattedLastUpdatedAt:"Jun 15, 2024",frontMatter:{sidebar_label:"Distributed Queue"},sidebar:"docs",previous:{title:"Group Member",permalink:"/docs/recipes-group-member"},next:{title:"Distributed ID Queue",permalink:"/docs/recipes-distributed-id-queue"}},s={},o=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Creating a DistributedQueue",id:"creating-a-distributedqueue",level:3},{value:"General Usage",id:"general-usage",level:2},{value:"Lock Safety",id:"lock-safety",level:2},{value:"Data Format",id:"data-format",level:2},{value:"Error Handling",id:"error-handling",level:2}],d={toc:o},p="wrapper";function c(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"recipe-distributed-queue"},"Recipe: Distributed Queue"),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"We recommend that you do NOT use ZooKeeper for Queues. Please see ",(0,n.kt)("a",{parentName:"p",href:"/docs/tech-note-04"},"Tech Note 4")," for details.")),(0,n.kt)("h2",{id:"description"},"Description"),(0,n.kt)("p",null,"An implementation of the Distributed Queue ZK recipe. Items put into the queue are guaranteed to be ordered (by means of ZK's PERSISTENTSEQUENTIAL node). If a single consumer takes items out of the queue, they will be ordered FIFO. If ordering is important, use a LeaderSelector to nominate a single consumer."),(0,n.kt)("h2",{id:"participating-classes"},"Participating Classes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"QueueBuilder"),(0,n.kt)("li",{parentName:"ul"},"QueueConsumer"),(0,n.kt)("li",{parentName:"ul"},"QueueSerializer"),(0,n.kt)("li",{parentName:"ul"},"DistributedQueue")),(0,n.kt)("h3",{id:"creating-a-distributedqueue"},"Creating a DistributedQueue"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// Parameters:\n// client - the curator client\n// consumer - functor to receive messages\n// serializer - serializer to use for items\n// queuePath - path to store queue\npublic static <T> QueueBuilder<T> builder(\n    CuratorFramework client,\n    QueueConsumer<T> consumer,\n    QueueSerializer<T> serializer,\n    java.lang.String queuePath\n);\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"QueueBuilder<MessageType>    builder = QueueBuilder.builder(client, consumer, serializer, path);\n// ... more builder method calls as needed ...\nDistributedQueue<MessageType queue = builder.build();\n")),(0,n.kt)("h2",{id:"general-usage"},"General Usage"),(0,n.kt)("p",null,"The queue must be started via the ",(0,n.kt)("inlineCode",{parentName:"p"},"start()")," method. Call ",(0,n.kt)("inlineCode",{parentName:"p"},"close()")," when you are done with the queue."),(0,n.kt)("p",null,"To add messages to the queue:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"queue.put(aMessage);\n")),(0,n.kt)("p",null,"Your consumer (",(0,n.kt)("inlineCode",{parentName:"p"},"QueueConsumer.consumeMessage()"),") will get called as messages arrive."),(0,n.kt)("h2",{id:"lock-safety"},"Lock Safety"),(0,n.kt)("p",null,"In the general usage case, the message is removed from the queue prior to the consumer being called. A more atomic mode is provided that removes the item from the queue only after the consumer successfully returns. To enable this mode, call the ",(0,n.kt)("inlineCode",{parentName:"p"},"lockPath()")," method of the Queue Builder. This uses a lock to make the message recoverable. A lock is held while the message is being processed - this prevents other processes from taking the message. The message will not be removed from the queue until the consumer functor returns. Thus, if there is a failure or the process dies, the message will get sent to another process. There is a small performance penalty for this behavior however."),(0,n.kt)("h2",{id:"data-format"},"Data Format"),(0,n.kt)("p",null,"The Distributed queue writes messages using this format:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Offset"),(0,n.kt)("th",{parentName:"tr",align:null},"Size"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"0"),(0,n.kt)("td",{parentName:"tr",align:null},"4"),(0,n.kt)("td",{parentName:"tr",align:null},"Format version. Currently 0x00010001")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"4"),(0,n.kt)("td",{parentName:"tr",align:null},"1"),(0,n.kt)("td",{parentName:"tr",align:null},"Opcode: 0x01 = message, 0x02 = End of data")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"5"),(0,n.kt)("td",{parentName:"tr",align:null},"4"),(0,n.kt)("td",{parentName:"tr",align:null},"Message byte length")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"9"),(0,n.kt)("td",{parentName:"tr",align:null},"n"),(0,n.kt)("td",{parentName:"tr",align:null},"Message: serialized message bytes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"9 + n"),(0,n.kt)("td",{parentName:"tr",align:null},"..."),(0,n.kt)("td",{parentName:"tr",align:null},"Next set of opcode-size-bytes until end of data")))),(0,n.kt)("h2",{id:"error-handling"},"Error Handling"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"QueueConsumer")," class extends ",(0,n.kt)("inlineCode",{parentName:"p"},"ConnectionStateListener"),". When the queue is started, it adds the listener to the Curator instance. Users of the ",(0,n.kt)("inlineCode",{parentName:"p"},"DistributedQueue")," must pay attention to any connection state changes."),(0,n.kt)("p",null,"If the SUSPENDED state is reported, the instance must assume that, until it receives a RECONNECTED state, the queue is no longer being updated. If the LOST state is reported, the queue is permanently down."))}c.isMDXComponent=!0}}]);