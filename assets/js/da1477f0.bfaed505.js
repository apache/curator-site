"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[1428],{9613:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),p=a,m=d["".concat(c,".").concat(p)]||d[p]||h[p]||i;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8606:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(7263),a=(r(9496),r(9613));const i={},o="Utilities",s={unversionedId:"utilities",id:"utilities",title:"Utilities",description:"Test Server",source:"@site/docs/utilities.md",sourceDirName:".",slug:"/utilities",permalink:"/docs/utilities",draft:!1,editUrl:"https://github.com/apache/curator-site/tree/main/docs/utilities.md",tags:[],version:"current",lastUpdatedBy:"Kezhu Wang",lastUpdatedAt:1728813389,formattedLastUpdatedAt:"Oct 13, 2024",frontMatter:{},sidebar:"docs",previous:{title:"Framework",permalink:"/docs/framework"},next:{title:"Client",permalink:"/docs/client"}},c={},l=[{value:"Test Server",id:"test-server",level:2},{value:"Test Cluster",id:"test-cluster",level:2},{value:"ZKPaths",id:"zkpaths",level:2},{value:"Circuit Breaking ConnectionStateListener",id:"circuit-breaking-connectionstatelistener",level:2},{value:"Locker",id:"locker",level:2},{value:"BlockingQueueConsumer",id:"blockingqueueconsumer",level:2},{value:"QueueSharder",id:"queuesharder",level:2},{value:"WatcherRemoveCuratorFramework",id:"watcherremovecuratorframework",level:2}],u={toc:l},d="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"utilities"},"Utilities"),(0,a.kt)("h2",{id:"test-server"},"Test Server"),(0,a.kt)("p",null,"In the curator-test sub-model the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestingServer")," class is provided. This class creates a local, in-process ZooKeeper server that can be used for testing."),(0,a.kt)("h2",{id:"test-cluster"},"Test Cluster"),(0,a.kt)("p",null,"In the curator-test sub-model the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestingCluster")," class is provided. This class creates an internally running ensemble of ZooKeeper servers."),(0,a.kt)("h2",{id:"zkpaths"},"ZKPaths"),(0,a.kt)("p",null,"Various static methods to help with using ZooKeeper ZNode paths:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'getNodeFromPath: Given a full path, return the node name. i.e. "/one/two/three" will return "three"'),(0,a.kt)("li",{parentName:"ul"},"mkdirs: Make sure all the nodes in the path are created."),(0,a.kt)("li",{parentName:"ul"},"getSortedChildren: Return the children of the given path sorted by sequence number"),(0,a.kt)("li",{parentName:"ul"},"makePath: Given a parent path and a child node, create a combined full path")),(0,a.kt)("h2",{id:"circuit-breaking-connectionstatelistener"},"Circuit Breaking ConnectionStateListener"),(0,a.kt)("p",null,"During network outages ZooKeeper can become very noisy sending connection/disconnection events in rapid succession. Curator recipes respond to these messages by resetting state, etc. E.g. LeaderLatch must delete its lock node and try to recreate it in order to try to re-obtain leadership, etc."),(0,a.kt)("p",null,'This noisy herding can be avoided by using the circuit breaking listener. When it receives ConnectionState.SUSPENDED, the circuit becomes "open" (based on the provided RetryPolicy) and will ignore future connection state changes until RetryPolicy timeout has elapsed. Note: however, if the connection goes from ConnectionState.SUSPENDED to ConnectionState.LOST the first LOST state is sent.'),(0,a.kt)("p",null,"When the circuit is closed, all connection state changes are forwarded to the managed listener. When the first disconnected state is received, the circuit becomes open. The state change that caused the circuit to open is sent to the managed listener and the RetryPolicy will be used to get a delay amount. While the delay is active, the circuit breaker will store state changes but will not forward them to the managed listener (except, however, the first time the state changes from SUSPENDED to LOST). When the delay elapses, if the connection has been restored, the circuit closes and forwards the new state to the managed listener. If the connection has not been restored, the RetryPolicy is checked again. If the RetryPolicy indicates another retry is allowed the process repeats. If, however, the RetryPolicy indicates that retries are exhausted then the circuit closes - if the current state is different than the state that caused the circuit to open it is forwarded to the managed listener."),(0,a.kt)("p",null,"You can enable the Circuit Breaking ConnectionStateListener during creation of your CuratorFramework instance. E.g.,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'ConnectionStateListenerManagerFactory factory = ConnectionStateListenerManagerFactory.circuitBreaking(...retry policy for circuit breaking...);\nCuratorFramework client = CuratorFrameworkFactory.builder()\n   .connectionStateListenerManagerFactory(factory)\n   ... etc ...\n   .build();\n// all connection state listeners set for "client" will get circuit breaking behavior\n')),(0,a.kt)("h2",{id:"locker"},"Locker"),(0,a.kt)("p",null,"Curator's Locker uses Java 7's try-with-resources feature to making using Curator locks safer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"InterProcessMutex mutex = new InterProcessMutex(...); // or any InterProcessLock\ntry (Locker locker = new Locker(mutex, maxTimeout, unit)) {\n   // do work\n}\n")),(0,a.kt)("h2",{id:"blockingqueueconsumer"},"BlockingQueueConsumer"),(0,a.kt)("p",null,"See: ",(0,a.kt)("a",{parentName:"p",href:"/docs/recipes-distributed-queue"},"DistributedQueue")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/recipes-distributed-priority-queue"},"DistributedPriorityQueue"),"."),(0,a.kt)("p",null,"A queue consumer that provides behavior similar to a JDK's BlockingQueue."),(0,a.kt)("h2",{id:"queuesharder"},"QueueSharder"),(0,a.kt)("p",null,"Due to limitations in ZooKeeper's transport layer, a single queue will break if it has more than 10K-ish items in it. This class provides a facade over multiple distributed queues. It monitors the queues and if any one of them goes over a threshold, a new queue is added. Puts are distributed amongst the queues."),(0,a.kt)("h2",{id:"watcherremovecuratorframework"},"WatcherRemoveCuratorFramework"),(0,a.kt)("p",null,"Curator has a utility that makes it easy to set watchers and remove them at a later date. It is used for all Curator recipes. From your CuratorFramework instance, call ",(0,a.kt)("inlineCode",{parentName:"p"},"newWatcherRemoveCuratorFramework()"),". When using this proxy instance any watchers that are set are recorded. You can then call ",(0,a.kt)("inlineCode",{parentName:"p"},"removeWatchers()")," to remove those watchers. See the Curator source code for usage details."))}h.isMDXComponent=!0}}]);