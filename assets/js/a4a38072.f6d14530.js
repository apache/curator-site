"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[8950],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),o=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=o(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=o(r),d=i,m=p["".concat(c,".").concat(d)]||p[d]||v[d]||a;return r?n.createElement(m,s(s({ref:t},u),{},{components:r})):n.createElement(m,s({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,s[1]=l;for(var o=2;o<a;o++)s[o]=r[o];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5030:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>v,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var n=r(7462),i=(r(7294),r(3905));const a={},s="Service Discovery Server",l={unversionedId:"service-discovery-server",id:"service-discovery-server",title:"Service Discovery Server",description:"Packaging",source:"@site/docs/service-discovery-server.md",sourceDirName:".",slug:"/service-discovery-server",permalink:"/docs/service-discovery-server",draft:!1,editUrl:"https://github.com/apache/curator-site/tree/main/docs/service-discovery-server.md",tags:[],version:"current",lastUpdatedBy:"Kezhu Wang",lastUpdatedAt:1692089714,formattedLastUpdatedAt:"Aug 15, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Service Discovery",permalink:"/docs/service-discovery"}},c={},o=[{value:"Packaging",id:"packaging",level:2},{value:"Description",id:"description",level:2},{value:"Deploying the Server",id:"deploying-the-server",level:2},{value:"REST",id:"rest",level:2},{value:"putService",id:"putservice",level:3},{value:"removeService",id:"removeservice",level:3},{value:"get",id:"get",level:3},{value:"getAllNames",id:"getallnames",level:3},{value:"getAll",id:"getall",level:3},{value:"getAny",id:"getany",level:3},{value:"JSON specs",id:"json-specs",level:2}],u={toc:o},p="wrapper";function v(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"service-discovery-server"},"Service Discovery Server"),(0,i.kt)("h2",{id:"packaging"},"Packaging"),(0,i.kt)("p",null,"Curator Service Discovery is in its own package in Maven Central: curator-x-discovery-server"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"The Service Discovery Server bridges non-Java or legacy applications with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/service-discovery"},"Curator Service Discovery"),". It exposes RESTful web services to register, remove, query, etc. services."),(0,i.kt)("p",null,"The Service Discovery Server provides JAX-RS components that can be incorporated into a container of your choice (Tomcat, Jetty, etc.). You can also choose any JAX-RS provider (Jersey, RESTEasy, etc.)."),(0,i.kt)("h2",{id:"deploying-the-server"},"Deploying the Server"),(0,i.kt)("p",null,"The server must be combined with a JAX-RS implementation (Jersey, etc.) and a container (Tomcat, Jetty, etc.)."),(0,i.kt)("p",null,"Several singletons need to be injected:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ServiceDiscovery"),(0,i.kt)("li",{parentName:"ul"},"DiscoveryContext"),(0,i.kt)("li",{parentName:"ul"},"JsonServiceInstanceMarshaller"),(0,i.kt)("li",{parentName:"ul"},"JsonServiceInstancesMarshaller"),(0,i.kt)("li",{parentName:"ul"},"JsonServiceNamesMarshaller")),(0,i.kt)("p",null,"Additionally, the JAX-RS Resource class must be injected. Due to how most JAX-RS implementations are written, you must create a concrete class that extends this using your payload type. The concrete class should have the base path that you'd like to use. Because the JAX-RS implementation can create a new instance of the resource for every request, your concrete class must use a context resolver to access the DiscoveryContext. Or, if you are using an IoC framework, you can access it that way."),(0,i.kt)("p",null,"Here's a version that has no payload (i.e. a ",(0,i.kt)("inlineCode",{parentName:"p"},"Void")," payload):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Path("/")\npublic class MyResource extends DiscoveryResource<Void> {\n   public MyResource(@Context ContextResolver<DiscoveryContext<Void>> resolver) {\n       // note: this may not work with all JAX-RS implementations\n       super(resolver.getContext(DiscoveryContext.class));\n   }\n}\n')),(0,i.kt)("h2",{id:"rest"},"REST"),(0,i.kt)("p",null,"Clients must make appropriate REST calls to register themselves and send periodic heartbeats. They can also find services via REST calls:"),(0,i.kt)("h3",{id:"putservice"},"putService"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Method: PUT"),(0,i.kt)("li",{parentName:"ul"},"Path: v1/service/{name}/{id}"),(0,i.kt)("li",{parentName:"ul"},"Request Entity: ServiceInstance"),(0,i.kt)("li",{parentName:"ul"},"Response Entity: n/a"),(0,i.kt)("li",{parentName:"ul"},"Description: {name} is the service name, {id} is the instance id. The request entity is a ServiceInstance. This method registers a service instance. If the ServiceType is STATIC, the instance is registered only for the pre-defined period (defined in the DiscoveryContext). STATIC services must call putService at least once per period. PERMANENT services are registered until they are manually deleted.")),(0,i.kt)("h3",{id:"removeservice"},"removeService"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Method: DELETE"),(0,i.kt)("li",{parentName:"ul"},"Path: v1/service/{name}/{id}"),(0,i.kt)("li",{parentName:"ul"},"Request Entity: n/a"),(0,i.kt)("li",{parentName:"ul"},"Response Entity: n/a"),(0,i.kt)("li",{parentName:"ul"},"Description: {name} is the service name, {id} is the instance id. The specified service is deleted/unregistered.")),(0,i.kt)("h3",{id:"get"},"get"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Method: GET"),(0,i.kt)("li",{parentName:"ul"},"Path: v1/service/{name}/{id}"),(0,i.kt)("li",{parentName:"ul"},"Request Entity: n/a"),(0,i.kt)("li",{parentName:"ul"},"Response Entity: ServiceInstance"),(0,i.kt)("li",{parentName:"ul"},"Description: {name} is the service name, {id} is the instance id. Returns the complete ServiceInstance for the specified service. 404 is returned if not found.")),(0,i.kt)("h3",{id:"getallnames"},"getAllNames"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Method: GET"),(0,i.kt)("li",{parentName:"ul"},"Path: v1/service"),(0,i.kt)("li",{parentName:"ul"},"Request Entity: n/a"),(0,i.kt)("li",{parentName:"ul"},"Response Entity: ServiceNames"),(0,i.kt)("li",{parentName:"ul"},"Description: Returns all currently registered service names.")),(0,i.kt)("h3",{id:"getall"},"getAll"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Method: GET"),(0,i.kt)("li",{parentName:"ul"},"Path: v1/service/{name}"),(0,i.kt)("li",{parentName:"ul"},"Request Entity: n/a"),(0,i.kt)("li",{parentName:"ul"},"Response Entity: ServiceInstances"),(0,i.kt)("li",{parentName:"ul"},"Description: {name} is the service name. Returns all service instances for the named service.")),(0,i.kt)("h3",{id:"getany"},"getAny"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Method: GET"),(0,i.kt)("li",{parentName:"ul"},"Path: v1/anyservice/{name}"),(0,i.kt)("li",{parentName:"ul"},"Request Entity: n/a"),(0,i.kt)("li",{parentName:"ul"},"Response Entity: ServiceInstance"),(0,i.kt)("li",{parentName:"ul"},"Description: {name} is the service name. Return a random instance from the given service or 404.")),(0,i.kt)("h2",{id:"json-specs"},"JSON specs"),(0,i.kt)("p",null,"The JSON specifications for the REST entities are documented here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apache/curator/blob/master/curator-x-discovery-server/README.txt"},"https://github.com/apache/curator/blob/master/curator-x-discovery-server/README.txt"),"."))}v.isMDXComponent=!0}}]);