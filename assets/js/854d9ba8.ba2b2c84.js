"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[6759],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>h});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function d(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),i=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=i(e.components);return n.createElement(s.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=i(t),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return t?n.createElement(h,l(l({ref:a},p),{},{components:t})):n.createElement(h,l({ref:a},p))}));function h(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var d={};for(var s in a)hasOwnProperty.call(a,s)&&(d[s]=a[s]);d.originalType=e,d[c]="string"==typeof e?e:r,l[1]=d;for(var i=2;i<o;i++)l[i]=t[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3511:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>i});var n=t(7462),r=(t(7294),t(3905));const o={displayed_sidebar:"docs"},l="Modeled Curator - Components",d={unversionedId:"modeled-components",id:"modeled-components",title:"Modeled Curator - Components",description:"Modeled Curator components are intended to allow you to model your ZooKeeper usage early in your application so that the majority of the code that interacts with ZooKeeper doesn't need to be concerned with paths, byte arrays, ACLs, options, etc. The Pub-Sub Example can give you some ideas on how to accomplish this.",source:"@site/docs/modeled-components.md",sourceDirName:".",slug:"/modeled-components",permalink:"/docs/modeled-components",draft:!1,editUrl:"https://github.com/apache/curator-site/tree/main/docs/modeled-components.md",tags:[],version:"current",lastUpdatedBy:"tison",lastUpdatedAt:1698746921,formattedLastUpdatedAt:"Oct 31, 2023",frontMatter:{displayed_sidebar:"docs"},sidebar:"docs"},s={},i=[{value:"ZPath",id:"zpath",level:2},{value:"NodeName",id:"nodename",level:3},{value:"Partial Resolution",id:"partial-resolution",level:3},{value:"ModelSpec",id:"modelspec",level:2},{value:"JacksonModelSerializer",id:"jacksonmodelserializer",level:3},{value:"ModeledFramework",id:"modeledframework",level:2},{value:"Partially Resolved ZPaths and Set/Update",id:"partially-resolved-zpaths-and-setupdate",level:3},{value:"Caching and Typed Parameters",id:"caching-and-typed-parameters",level:2}],p={toc:i},c="wrapper";function u(e){let{components:a,...t}=e;return(0,r.kt)(c,(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"modeled-curator---components"},"Modeled Curator - Components"),(0,r.kt)("p",null,"Modeled Curator components are intended to allow you to model your ZooKeeper usage early in your application so that the majority of the code that interacts with ZooKeeper doesn't need to be concerned with paths, byte arrays, ACLs, options, etc. The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/apache/curator/tree/master/curator-examples/src/main/java/pubsub"},"Pub-Sub Example")," can give you some ideas on how to accomplish this."),(0,r.kt)("h2",{id:"zpath"},"ZPath"),(0,r.kt)("p",null,"Instead of using raw string paths, Modeled Curator defines the ",(0,r.kt)("inlineCode",{parentName:"p"},"ZPath")," interface that abstracts ZooKeeper paths. ZPaths can be simple static paths or can contain parameters that can be replaced as needed."),(0,r.kt)("p",null,"To build a simple static path, use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ZPath path = ZPath.parse("/my/static/path");\n')),(0,r.kt)("p",null,"To build a path with parameters, use. ",(0,r.kt)("inlineCode",{parentName:"p"},"ZPath.parseWithIds()"),' using the value "{XXXX}" to denote a parameter. You can then use the ',(0,r.kt)("inlineCode",{parentName:"p"},"resolve()"),' method to replace the parameters. The value between "{}" can be any value. E.g.,'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ZPath path = ZPath.parseWithIds("/foo/{first param}/bar/{second param}");\nZPath resolvedPath = path.resolve(param1, param2);\n')),(0,r.kt)("h3",{id:"nodename"},"NodeName"),(0,r.kt)("p",null,"Parameters are resolved by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"toString()")," on the parameter. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeName")," to change this behavior. If a parameter implements ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeName")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"nodeName()")," method is used as the parameter value."),(0,r.kt)("h3",{id:"partial-resolution"},"Partial Resolution"),(0,r.kt)("p",null,"ZPaths can be partially resolved. E.g.,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ZPath path = ZPath.parseWithIds("/foo/{type}/bar/{id}");\nZPath partial = path.resolve("standard");\n// partial is now "/foo/standard/bar/{id}"\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#ModeledFramework"},"ModeledFramework")," takes advantage of this. See below for details."),(0,r.kt)("h2",{id:"modelspec"},"ModelSpec"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelSpec")," contains all the metadata needed to operate on a ZooKeeper path:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ZPath"),(0,r.kt)("li",{parentName:"ul"},"A serializer for the data stored at the path"),(0,r.kt)("li",{parentName:"ul"},"Options for how nodes should be created (sequential, compressed data, ttl, etc.)"),(0,r.kt)("li",{parentName:"ul"},"ACLs for the nodes at the path"),(0,r.kt)("li",{parentName:"ul"},"Options for how to delete nodes (guaranteed, deleting children, etc.)")),(0,r.kt)("p",null,"ModelSpec instances are created via a builder. The builder sets defaults that should be useful for most applications but you can alter any of these as needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// a standard model spec for the given path and serializer\n// the model spec will have no ACLs and the options:\n// * createParentsAsContainers\n// * setDataIfExists\n// * DeleteOption.guaranteed\nModelSpec<MyModel> spec = ModelSpec.builder(path, JacksonModelSerializer.build(MyModel.class)).build();\n")),(0,r.kt)("p",null,"As a convenience, ModelSpec provides ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve()")," methods in case the ZPath used has parameters. E.g.,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ZPath path = ZPath.parseWithIds("/foo/{id}/bar/{id}");\nModelSpec<MyModel> spec = ModelSpec.builder(path, JacksonModelSerializer.build(MyModel.class)).build();\nModelSpec<MyModel> resolvedSpec = spec.resolve(param1, param2);\n')),(0,r.kt)("h3",{id:"jacksonmodelserializer"},"JacksonModelSerializer"),(0,r.kt)("p",null,"A Jackson serializer, ",(0,r.kt)("inlineCode",{parentName:"p"},"JacksonModelSerializer"),', is included. However, the Jackson dependency for it is specified as "provided" in the curator-x-async Maven POM file to avoid adding a new dependency to Curator. Therefore, if you wish to use the JacksonModelSerializer you must manually add the dependency to your build system.'),(0,r.kt)("p",null,"E.g., for Maven:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>${jackson.version}</version>\n</dependency>\n")),(0,r.kt)("h2",{id:"modeledframework"},"ModeledFramework"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ModeledFramework")," ties together all the metadata into a Curator-style instance that is used to perform ZooKeeper operations. E.g.,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"ModeledFramework<MyModel> modeledClient = ModeledFramework.wrap(client, myModelSpec);\nMyModel instance = ...;\nmodeledClient.set(instance);\n")),(0,r.kt)("p",null,'The "set" call in the above example is the equivalent of:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'MyModel instance = ...;\nString path = "/foo/bar/" + instance.getId();\nbyte[] data = serializer.serialize(instance);\nclient.create()\n    .withOptions(Sets.newHashSet(CreateOption.createParentsAsContainers, CreateOption.setDataIfExists))\n    .forPath(path, data);\n')),(0,r.kt)("p",null,"To get a value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ModeledFramework<MyModel> modeledClient = ModeledFramework.wrap(client, myModelSpec);\nmodeledClient.read().whenComplete((value, e) -> {\n    if (e != null) {\n        // handle the error\n    } else {\n        // "value" is the MyModel instance\n    }\n});\n')),(0,r.kt)("p",null,'The "read" call in the above example is the equivalent of:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String path = "/foo/bar/" + instanceId;\nclient.getData().forPath(path).whenComplete((data, e) -> {\n    if (e != null) {\n        // handle the error\n    } else {\n        // NOTE: you must deal with possible deserialization problems\n        // caused by clients that write bad data\n        // If all of your code uses ModeledFramework you can guarantee that\n        // the data is always correctly written\n        MyModel model = serializer.deserialize(data);\n        // ...\n    }\n});\n')),(0,r.kt)("h3",{id:"partially-resolved-zpaths-and-setupdate"},"Partially Resolved ZPaths and Set/Update"),(0,r.kt)("p",null,"ModeledFramework's various ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," methods check for unresolved ZPaths. If the current modelSpec has an unresolved ZPath when set/update is called, it is automatically resolved using the model instance being set/updated. E.g.,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ZPath path = ZPath.parseWithIds("/root/{type}/instance/{id}");\nModelSpec<MyModel> modelSpec = ModelSpec.builder(path, serializer);\nModeledFramework<MyModel> modeledClient = ModeledFramework.wrap(modelSpec, client, modelSpec);\nString currentType = ...;\nMyModel model = ...;\nmodeledClient.resolved(currentType).set(model); // internally, ModeledFramework calls ZPath.resolved()\n                                                // using "model" as the argument to get the actual ZPath\n\n')),(0,r.kt)("h2",{id:"caching-and-typed-parameters"},"Caching and Typed Parameters"),(0,r.kt)("p",null,"In addition to the above features, Modeled Curator supports Integrated Caching, Typed Parameters and Versioning. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/modeled-typed"},"Caching and Typed Parameters")," for details."))}u.isMDXComponent=!0}}]);