"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[4625],{9613:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var a=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},c=Object.keys(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),s=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),d=n,g=u["".concat(o,".").concat(d)]||u[d]||h[d]||c;return r?a.createElement(g,i(i({ref:t},p),{},{components:r})):a.createElement(g,i({ref:t},p))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,i=new Array(c);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<c;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8975:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>s});var a=r(7263),n=(r(9496),r(9613));const c={sidebar_label:"Tree Cache"},i="Recipe: Tree Cache",l={unversionedId:"recipes-tree-cache",id:"recipes-tree-cache",title:"Recipe: Tree Cache",description:"Description",source:"@site/docs/recipes-tree-cache.md",sourceDirName:".",slug:"/recipes-tree-cache",permalink:"/docs/recipes-tree-cache",draft:!1,editUrl:"https://github.com/apache/curator-site/tree/main/docs/recipes-tree-cache.md",tags:[],version:"current",lastUpdatedBy:"Kezhu Wang",lastUpdatedAt:1728813389,formattedLastUpdatedAt:"Oct 13, 2024",frontMatter:{sidebar_label:"Tree Cache"},sidebar:"docs",previous:{title:"Node Cache",permalink:"/docs/recipes-node-cache"},next:{title:"Persistent Recursive Watcher",permalink:"/docs/recipes-persistent-watcher"}},o={},s=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Creating a TreeCache",id:"creating-a-treecache",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Error Handling",id:"error-handling",level:2}],p={toc:s},u="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"recipe-tree-cache"},"Recipe: Tree Cache"),(0,n.kt)("h2",{id:"description"},"Description"),(0,n.kt)("p",null,"A utility that attempts to keep all data from all children of a ZK path locally cached. This class will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can register a listener that will get notified when changes occur."),(0,n.kt)("h2",{id:"participating-classes"},"Participating Classes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"TreeCache"),(0,n.kt)("li",{parentName:"ul"},"TreeCacheListener"),(0,n.kt)("li",{parentName:"ul"},"TreeCacheEvent"),(0,n.kt)("li",{parentName:"ul"},"ChildData")),(0,n.kt)("h2",{id:"creating-a-treecache"},"Creating a TreeCache"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// Parameters:\n// client - the client\n// path - path to watch\n// cacheData - if true, node contents are cached in addition to the stat\npublic TreeCache(CuratorFramework client, String path, boolean cacheData);\n")),(0,n.kt)("h2",{id:"general-usage"},"General Usage"),(0,n.kt)("p",null,"The cache must be started by calling ",(0,n.kt)("inlineCode",{parentName:"p"},"start()"),". Call ",(0,n.kt)("inlineCode",{parentName:"p"},"close()")," when you are through with the cache."),(0,n.kt)("p",null,"At any time, call ",(0,n.kt)("inlineCode",{parentName:"p"},"getCurrentChildren()")," to get the current state of the cache. Alternatively, call ",(0,n.kt)("inlineCode",{parentName:"p"},"getCurrentData()")," to get the data for a given path that's being monitored."),(0,n.kt)("p",null,"You can also register to be notified when a change occurs by calling ",(0,n.kt)("inlineCode",{parentName:"p"},"getListenable()")," and then:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// Add a change listener\n// Parameters:\n// listener - the listener\npublic void addListener(TreeCacheListener listener);\n")),(0,n.kt)("h2",{id:"error-handling"},"Error Handling"),(0,n.kt)("p",null,"TreeCache instances internally monitor a ",(0,n.kt)("inlineCode",{parentName:"p"},"ConnectionStateListener"),". If the connection state changes, the cache will receive messages detailing the change."))}h.isMDXComponent=!0}}]);