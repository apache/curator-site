"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[4485],{5602:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"logging","title":"Logging and Tracing","description":"Details","source":"@site/docs/logging.md","sourceDirName":".","slug":"/logging","permalink":"/docs/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/logging.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1741292192000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Error Handling","permalink":"/docs/errors"},"next":{"title":"Tech Notes","permalink":"/docs/tech-notes"}}');var o=n(5105),i=n(6413);const a={},s="Logging and Tracing",c={},d=[{value:"Details",id:"details",level:2},{value:"Logging",id:"logging",level:2},{value:"Tracing",id:"tracing",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"logging-and-tracing",children:"Logging and Tracing"})}),"\n",(0,o.jsx)(r.h2,{id:"details",children:"Details"}),"\n",(0,o.jsx)(r.p,{children:"Curator is logging and tracing neutral. The Curator code is instrumented with logging and tracers but uses a driver mechanism that allows easy integration into your preferred logging and tracing frameworks."}),"\n",(0,o.jsx)(r.h2,{id:"logging",children:"Logging"}),"\n",(0,o.jsxs)(r.p,{children:["Curator uses SLF4J (",(0,o.jsx)(r.a,{href:"https://www.slf4j.org/",children:"https://www.slf4j.org/"}),") for logging. SLF4J is a facade over logging that allows you to plug in any (or no) logging framework. See the SLF4J website for details."]}),"\n",(0,o.jsx)(r.h2,{id:"tracing",children:"Tracing"}),"\n",(0,o.jsxs)(r.p,{children:["Connect Curator tracing to your tracing framework via an instance of ",(0,o.jsx)(r.code,{children:"TracerDriver"})," or ",(0,o.jsx)(r.code,{children:"AdvancedTracerDriver"}),". Curator calls the various methods (e.g. ",(0,o.jsx)(r.code,{children:"addTrace()"})," or ",(0,o.jsx)(r.code,{children:"addCount()"}),") and your instance proxies the calls to your tracing framework. Inform Curator of your tracing driver instance by calling ",(0,o.jsx)(r.code,{children:"CuratorZookeeperClient.setTracerDriver()"}),"."]})]})}function g(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},6413:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var t=n(8101);const o={},i=t.createContext(o);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);