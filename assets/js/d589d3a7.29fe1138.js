"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[7924],{1219:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"getting-started","title":"Getting Started","description":"Learn ZooKeeper","source":"@site/docs/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/docs/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/getting-started.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1740614244000,"frontMatter":{},"sidebar":"docs","previous":{"title":"About","permalink":"/docs/about"},"next":{"title":"Examples","permalink":"/docs/examples"}}');var o=r(5105),a=r(6413);const i={},s="Getting Started",c={},l=[{value:"Learn ZooKeeper",id:"learn-zookeeper",level:2},{value:"Using Curator",id:"using-curator",level:2},{value:"Getting a Connection",id:"getting-a-connection",level:2},{value:"Calling ZooKeeper Directly",id:"calling-zookeeper-directly",level:2},{value:"Recipes",id:"recipes",level:2},{value:"Distributed Lock",id:"distributed-lock",level:3},{value:"Leader Election",id:"leader-election",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,o.jsx)(t.h2,{id:"learn-zookeeper",children:"Learn ZooKeeper"}),"\n",(0,o.jsxs)(t.p,{children:["Curator users are assumed to know ZooKeeper. A good place to start is here: ",(0,o.jsx)(t.a,{href:"https://zookeeper.apache.org/doc/current/zookeeperStarted.html",children:"https://zookeeper.apache.org/doc/current/zookeeperStarted.html"})]}),"\n",(0,o.jsx)(t.h2,{id:"using-curator",children:"Using Curator"}),"\n",(0,o.jsxs)(t.p,{children:["The Curator JARs are available from Maven Central. The various artifacts are listed on the ",(0,o.jsx)(t.a,{href:"/docs/about",children:"main page"}),". Users of Maven, Gradle, Ant, etc. can easily include Curator into their build script."]}),"\n",(0,o.jsx)(t.p,{children:"Most users will want to use one of Curator's pre-built recipes. So, the curator-recipes is the correct artifact to use. If you only want a wrapper around ZooKeeper that adds connection management and retry policies, use curator-framework."}),"\n",(0,o.jsx)(t.h2,{id:"getting-a-connection",children:"Getting a Connection"}),"\n",(0,o.jsxs)(t.p,{children:["Curator uses ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Fluent_interface",children:"Fluent Style"}),". If you haven't used this before, it might seem odd, so it's suggested that you familiarize yourself with the style."]}),"\n",(0,o.jsxs)(t.p,{children:["Curator connection instances (",(0,o.jsx)(t.code,{children:"CuratorFramework"}),") are allocated from the ",(0,o.jsx)(t.code,{children:"CuratorFrameworkFactory"}),". You only need ",(0,o.jsx)(t.strong,{children:"one"})," ",(0,o.jsx)(t.code,{children:"CuratorFramework"})," object for each ZooKeeper cluster you are connecting to:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"CuratorFrameworkFactory.newClient(zookeeperConnectionString, retryPolicy)\n"})}),"\n",(0,o.jsx)(t.p,{children:"This will create a connection to a ZooKeeper cluster using default values. The only thing that you need to specify is the retry policy. For most cases, you should use:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3)\nCuratorFramework client = CuratorFrameworkFactory.newClient(zookeeperConnectionString, retryPolicy);\nclient.start();\n"})}),"\n",(0,o.jsx)(t.p,{children:"The client must be started (and closed when no longer needed)."}),"\n",(0,o.jsx)(t.h2,{id:"calling-zookeeper-directly",children:"Calling ZooKeeper Directly"}),"\n",(0,o.jsx)(t.p,{children:"Once you have a CuratorFramework instance, you can make direct calls to ZooKeeper in a similar way to using the raw ZooKeeper object provided in the ZooKeeper distribution. E.g.:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'client.create().forPath("/my/path", myData)\n'})}),"\n",(0,o.jsx)(t.p,{children:"The benefit here is that Curator manages the ZooKeeper connection and will retry operations if there are connection problems."}),"\n",(0,o.jsx)(t.h2,{id:"recipes",children:"Recipes"}),"\n",(0,o.jsx)(t.h3,{id:"distributed-lock",children:"Distributed Lock"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"InterProcessMutex lock = new InterProcessMutex(client, lockPath);\nif (lock.acquire(maxWait, waitUnit)) {\n    try {\n        // do some work inside of the critical section here\n    } finally {\n        lock.release();\n    }\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"leader-election",children:"Leader Election"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"LeaderSelectorListener listener = new LeaderSelectorListenerAdapter() {\n    public void takeLeadership(CuratorFramework client) throws Exception {\n        // this callback will get called when you are the leader\n        // do whatever leader work you need to and only exit\n        // this method when you want to relinquish leadership\n    }\n}\n\nLeaderSelector selector = new LeaderSelector(client, path, listener);\nselector.autoRequeue();  // not required, but this is behavior that you will probably expect\nselector.start();\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},6413:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>s});var n=r(8101);const o={},a=n.createContext(o);function i(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);