"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[4788],{1681:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"recipes-shared-semaphore","title":"Recipe: Shared Semaphore","description":"Description","source":"@site/docs/recipes-shared-semaphore.md","sourceDirName":".","slug":"/recipes-shared-semaphore","permalink":"/docs/recipes-shared-semaphore","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/recipes-shared-semaphore.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1737531742000,"frontMatter":{"sidebar_label":"Shared Semaphore"},"sidebar":"docs","previous":{"title":"Shared Reentrant Read Write Lock","permalink":"/docs/recipes-shared-reentrant-read-write-lock"},"next":{"title":"Multi Shared Lock","permalink":"/docs/recipes-multi-shared-lock"}}');var t=a(5105),r=a(6755);const i={sidebar_label:"Shared Semaphore"},o="Recipe: Shared Semaphore",l={},c=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Creating an InterProcessSemaphoreV2",id:"creating-an-interprocesssemaphorev2",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Error Handling",id:"error-handling",level:2}];function h(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"recipe-shared-semaphore",children:"Recipe: Shared Semaphore"})}),"\n",(0,t.jsx)(s.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(s.p,{children:'A counting semaphore that works across JVMs. All processes in all JVMs that use the same lock path will achieve an inter-process limited set of leases. Further, this semaphore is mostly "fair" - each user will get a lease in the order requested (from ZK\'s point of view).'}),"\n",(0,t.jsx)(s.p,{children:"There are two modes for determining the max leases for the semaphore. In the first mode the max leases is a convention maintained by the users of a given path. In the second mode a SharedCountReader is used as the method for semaphores of a given path to determine the max leases."}),"\n",(0,t.jsx)(s.p,{children:"If a SharedCountReader is not used, no internal checks are done to prevent Process A acting as if there are 10 leases and Process B acting as if there are 20. Therefore, make sure that all instances in all processes use the same numberOfLeases value."}),"\n",(0,t.jsxs)(s.p,{children:["The various acquire methods return Lease objects that represent acquired leases. Clients must take care to close lease objects (ideally in a ",(0,t.jsx)(s.code,{children:"finally"})," block) else the lease will be lost. However, if the client session drops (crash, etc.), any leases held by the client are automatically closed and made available to other clients."]}),"\n",(0,t.jsx)(s.h2,{id:"participating-classes",children:"Participating Classes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"InterProcessSemaphoreV2"}),"\n",(0,t.jsx)(s.li,{children:"Lease"}),"\n",(0,t.jsx)(s.li,{children:"SharedCountReader"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"creating-an-interprocesssemaphorev2",children:"Creating an InterProcessSemaphoreV2"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"// Parameters:\n// client - client\n// path - the path to lock\n// numberOfLeases - the number of leases allowed by this semaphore\npublic InterProcessSemaphoreV2(\n    CuratorFramework client,\n    String path,\n    int numberOfLeases\n);\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"// Parameters:\n// client - the client\n// path - path for the semaphore\n// count - the shared count to use for the max leases\npublic InterProcessSemaphoreV2(\n    CuratorFramework client,\n    String path,\n    SharedCountReader count\n);\n"})}),"\n",(0,t.jsx)(s.h2,{id:"general-usage",children:"General Usage"}),"\n",(0,t.jsx)(s.p,{children:"To acquire one lease/usage, use one of the acquire methods:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"// Acquire a lease. If no leases are available, this method blocks until either the maximum number of\n// leases is increased or another client/process closes a lease.\n// The client must close the lease when it is done with it. You should do this in a finally block.\npublic Lease acquire();\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"// Acquire qty leases. If there are not enough leases available, this method blocks until either the\n// maximum number of leases is increased enough or other clients/processes close enough leases.\n// The client must close the leases when it is done with them. You should do this in a finally block.\n// NOTE: You can use returnAll(Collection) for this.\n// Parameters:\n// qty - number of leases to acquire\npublic Collection<Lease> acquire(int qty);\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"// Acquire a lease. If no leases are available, this method blocks until either the maximum number of\n// leases is increased or another client/process closes a lease. However, this method will only block\n// to a maximum of the time parameters given.\n// The client must close the lease when it is done with it. You should do this in a finally block.\n// Parameters:\n// time - time to wait\n// unit - time unit\n// Returns:\n// the new lease or null if time ran out\npublic Lease acquire(long time, TimeUnit unit);\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"// Acquire qty leases. If there are not enough leases available, this method blocks until either the\n// maximum number of leases is increased enough or other clients/processes close enough leases. However,\n// this method will only block to a maximum of the time parameters given. If time expires before all\n// leases are acquired, the subset of acquired leases are automatically closed.\n// The client must close the leases when it is done with them. You should do this in a finally block.\n// NOTE: You can use returnAll(Collection) for this.\n// Parameters:\n// qty - number of leases to acquire\n// time - time to wait\n// unit - time unit\npublic Collection<Lease> acquire(int qty, long time, TimeUnit unit);\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Lease"})," instances can either be closed directly or you can use these convenience methods:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"public void returnAll(Collection<Lease> leases);\npublic void returnLease(Lease lease);\n"})}),"\n",(0,t.jsx)(s.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(s.p,{children:["It is strongly recommended that you add a ",(0,t.jsx)(s.code,{children:"ConnectionStateListener"})," and watch for SUSPENDED and LOST state changes. If a SUSPENDED state is reported you cannot be certain that you still hold the lock unless you subsequently receive a RECONNECTED state. If a LOST state is reported it is certain that you no longer hold the lock."]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},6755:(e,s,a)=>{a.d(s,{R:()=>i,x:()=>o});var n=a(8101);const t={},r=n.createContext(t);function i(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);