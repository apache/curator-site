"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[5438],{4048:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"recipes-shared-reentrant-read-write-lock","title":"Recipe: Shared Reentrant Read Write Lock","description":"Description","source":"@site/docs/recipes-shared-reentrant-read-write-lock.md","sourceDirName":".","slug":"/recipes-shared-reentrant-read-write-lock","permalink":"/docs/recipes-shared-reentrant-read-write-lock","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/recipes-shared-reentrant-read-write-lock.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1740614244000,"frontMatter":{"sidebar_label":"Shared Reentrant Read Write Lock"},"sidebar":"docs","previous":{"title":"Shared Lock","permalink":"/docs/recipes-shared-lock"},"next":{"title":"Shared Semaphore","permalink":"/docs/recipes-shared-semaphore"}}');var a=t(5105),s=t(6413);const i={sidebar_label:"Shared Reentrant Read Write Lock"},o="Recipe: Shared Reentrant Read Write Lock",c={},l=[{value:"Description",id:"description",level:2},{value:"Reentrancy",id:"reentrancy",level:3},{value:"Lock Downgrading",id:"lock-downgrading",level:3},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Create an InterProcessReadWriteLock",id:"create-an-interprocessreadwritelock",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Error Handling",id:"error-handling",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"recipe-shared-reentrant-read-write-lock",children:"Recipe: Shared Reentrant Read Write Lock"})}),"\n",(0,a.jsx)(r.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(r.p,{children:'A re-entrant read/write mutex that works across JVMs. Uses Zookeeper to hold the lock. All processes in all JVMs that use the same lock path will achieve an inter-process critical section. Further, this mutex is "fair" - each user will get the mutex in the order requested (from ZK\'s point of view).'}),"\n",(0,a.jsx)(r.p,{children:"A read write lock maintains a pair of associated locks, one for read-only operations and one for writing. The read lock may be held simultaneously by multiple reader processes, so long as there are no writers. The write lock is exclusive."}),"\n",(0,a.jsx)(r.h3,{id:"reentrancy",children:"Reentrancy"}),"\n",(0,a.jsx)(r.p,{children:"This lock allows both readers and writers to reacquire read or write locks in the style of a re-entrant lock. Non-re-entrant readers are not allowed until all write locks held by the writing thread/process have been released. Additionally, a writer can acquire the read lock, but not vice-versa. If a reader tries to acquire the write lock it will never succeed."}),"\n",(0,a.jsx)(r.h3,{id:"lock-downgrading",children:"Lock Downgrading"}),"\n",(0,a.jsx)(r.p,{children:"Reentrancy also allows downgrading from the write lock to a read lock, by acquiring the write lock, then the read lock and then releasing the write lock. However, upgrading from a read lock to the write lock is not possible."}),"\n",(0,a.jsx)(r.h2,{id:"participating-classes",children:"Participating Classes"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"InterProcessReadWriteLock"}),"\n",(0,a.jsx)(r.li,{children:"InterProcessLock"}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"create-an-interprocessreadwritelock",children:"Create an InterProcessReadWriteLock"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"// Parameters:\n// client - the client\n// basePath - path to use for locking\npublic InterProcessReadWriteLock(CuratorFramework client, String basePath);\n"})}),"\n",(0,a.jsx)(r.h2,{id:"general-usage",children:"General Usage"}),"\n",(0,a.jsxs)(r.p,{children:["Access either the read lock or the write lock and then use the methods as described for ",(0,a.jsx)(r.a,{href:"/docs/recipes-shared-lock",children:"Shared lock"}),"."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:"public InterProcessLock readLock();\npublic InterProcessLock writeLock();\n"})}),"\n",(0,a.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsxs)(r.p,{children:["It is strongly recommended that you add a ",(0,a.jsx)(r.code,{children:"ConnectionStateListener"})," and watch for SUSPENDED and LOST state changes. If a SUSPENDED state is reported you cannot be certain that you still hold the lock unless you subsequently receive a RECONNECTED state. If a LOST state is reported it is certain that you no longer hold the lock."]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},6413:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var n=t(8101);const a={},s=n.createContext(a);function i(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);