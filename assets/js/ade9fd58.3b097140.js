"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[8727],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var a=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=a.createContext({}),o=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},d=function(e){var t=o(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=o(r),m=i,h=c["".concat(l,".").concat(m)]||c[m]||p[m]||n;return r?a.createElement(h,u(u({ref:t},d),{},{components:r})):a.createElement(h,u({ref:t},d))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,u=new Array(n);u[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,u[1]=s;for(var o=2;o<n;o++)u[o]=r[o];return a.createElement.apply(null,u)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},838:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>u,default:()=>p,frontMatter:()=>n,metadata:()=>s,toc:()=>o});var a=r(7462),i=(r(7294),r(3905));const n={sidebar_label:"Distributed Delay Queue"},u="Recipe: Distributed Delay Queue",s={unversionedId:"recipes-distributed-delay-queue",id:"recipes-distributed-delay-queue",title:"Recipe: Distributed Delay Queue",description:"We recommend that you do NOT use ZooKeeper for Queues. Please see Tech Note 4 for details.",source:"@site/docs/recipes-distributed-delay-queue.md",sourceDirName:".",slug:"/recipes-distributed-delay-queue",permalink:"/docs/recipes-distributed-delay-queue",draft:!1,editUrl:"https://github.com/apache/curator-site/tree/main/docs/recipes-distributed-delay-queue.md",tags:[],version:"current",lastUpdatedBy:"tison",lastUpdatedAt:1692088361,formattedLastUpdatedAt:"Aug 15, 2023",frontMatter:{sidebar_label:"Distributed Delay Queue"},sidebar:"docs",previous:{title:"Distributed Priority Queue",permalink:"/docs/recipes-distributed-priority-queue"},next:{title:"Simple Distributed Queue",permalink:"/docs/recipes-simple-distributed-queue"}},l={},o=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Creating a DistributedDelayQueue",id:"creating-a-distributeddelayqueue",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Lock Safety",id:"lock-safety",level:2},{value:"Data Format",id:"data-format",level:2},{value:"Error Handling",id:"error-handling",level:2}],d={toc:o},c="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"recipe-distributed-delay-queue"},"Recipe: Distributed Delay Queue"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"We recommend that you do NOT use ZooKeeper for Queues. Please see ",(0,i.kt)("a",{parentName:"p",href:"/docs/tech-note-04"},"Tech Note 4")," for details.")),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"An implementation of a Distributed Delay Queue. A Delay Queue is similar to a Priority Queue. When items are added to the queue, a delay value is given. The item will not be sent to a consumer until the time elapses."),(0,i.kt)("h2",{id:"participating-classes"},"Participating Classes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"QueueBuilder"),(0,i.kt)("li",{parentName:"ul"},"QueueConsumer"),(0,i.kt)("li",{parentName:"ul"},"QueueSerializer"),(0,i.kt)("li",{parentName:"ul"},"DistributedDelayQueue")),(0,i.kt)("h2",{id:"creating-a-distributeddelayqueue"},"Creating a DistributedDelayQueue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Parameters:\n// client - the curator client\n// consumer - message consumer\n// serializer - serializer to use for items\n// queuePath - path to store queue\npublic static <T> QueueBuilder<T> builder(\n    CuratorFramework client,\n    QueueConsumer<T> consumer,\n    QueueSerializer<T> serializer,\n    java.lang.String queuePath\n);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"QueueBuilder<MessageType> builder = QueueBuilder.builder(client, consumer, serializer, path);\n// ... more builder method calls as needed ...\nDistributedDelayQueue<MessageType> queue = builder.buildDelayQueue();\n")),(0,i.kt)("h2",{id:"general-usage"},"General Usage"),(0,i.kt)("p",null,"The queue must be started via the ",(0,i.kt)("inlineCode",{parentName:"p"},"start()")," method. Call ",(0,i.kt)("inlineCode",{parentName:"p"},"close()")," when you are done with the queue."),(0,i.kt)("p",null,"To add messages to the queue:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"queue.put(aMessage, delayUntilEpoch);\n")),(0,i.kt)("p",null,"The consumer (",(0,i.kt)("inlineCode",{parentName:"p"},"QueueConsumer.consumeMessage()"),") will get called as messages arrive. ",(0,i.kt)("inlineCode",{parentName:"p"},"delayUntilEpoch")," is a future epoch (milliseconds) when this item will be available to consumers."),(0,i.kt)("h2",{id:"lock-safety"},"Lock Safety"),(0,i.kt)("p",null,"In the general usage case, the message is removed from the queue prior to the consumer being called. A more atomic mode is provided that removes the item from the queue only after the consumer successfully returns. To enable this mode, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"lockPath()")," method of the Queue Builder. This uses a lock to make the message recoverable. A lock is held while the message is being processed - this prevents other processes from taking the message. The message will not be removed from the queue until the consumer functor returns. Thus, if there is a failure or the process dies, the message will get sent to another process. There is a small performance penalty for this behavior however."),(0,i.kt)("h2",{id:"data-format"},"Data Format"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("a",{parentName:"p",href:"/docs/recipes-distributed-queue"},"Distributed Queue"),"."),(0,i.kt)("h2",{id:"error-handling"},"Error Handling"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"QueueConsumer")," class extends ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionStateListener"),". When the queue is started, it adds the listener to the Curator instance. Users of the ",(0,i.kt)("inlineCode",{parentName:"p"},"DistributedPriorityQueue")," must pay attention to any connection state changes."),(0,i.kt)("p",null,"If the SUSPENDED state is reported, the instance must assume that, until it receives a RECONNECTED state, the queue is no longer being updated. If the LOST state is reported, the queue is permanently down."))}p.isMDXComponent=!0}}]);