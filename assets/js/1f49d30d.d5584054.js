"use strict";(self.webpackChunkcurator_site=self.webpackChunkcurator_site||[]).push([[1572],{4491:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"recipes-double-barrier","title":"Recipe: Double Barrier","description":"Description","source":"@site/docs/recipes-double-barrier.md","sourceDirName":".","slug":"/recipes-double-barrier","permalink":"/docs/recipes-double-barrier","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/curator-site/tree/main/docs/recipes-double-barrier.md","tags":[],"version":"current","lastUpdatedBy":"tison","lastUpdatedAt":1740614244000,"frontMatter":{"sidebar_label":"Double Barrier"},"sidebar":"docs","previous":{"title":"Barrier","permalink":"/docs/recipes-barrier"},"next":{"title":"Shared Counter","permalink":"/docs/recipes-shared-counter"}}');var t=i(5105),a=i(6413);const s={sidebar_label:"Double Barrier"},l="Recipe: Double Barrier",c={},o=[{value:"Description",id:"description",level:2},{value:"Participating Classes",id:"participating-classes",level:2},{value:"Creating a DistributedBarrier",id:"creating-a-distributedbarrier",level:2},{value:"General Usage",id:"general-usage",level:2},{value:"Error Handling",id:"error-handling",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"recipe-double-barrier",children:"Recipe: Double Barrier"})}),"\n",(0,t.jsx)(r.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(r.p,{children:"An implementation of the Distributed Double Barrier ZK recipe."}),"\n",(0,t.jsx)(r.p,{children:"Double barriers enable clients to synchronize the beginning and the end of a computation. When enough processes have\njoined the barrier, processes start their computation and leave the barrier once they have finished."}),"\n",(0,t.jsx)(r.h2,{id:"participating-classes",children:"Participating Classes"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"DistributedDoubleBarrier"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"creating-a-distributedbarrier",children:"Creating a DistributedBarrier"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"// Creates the barrier abstraction. memberQty is the number of members in the barrier. When enter() is called,\n// it blocks until all members have entered. When leave() is called, it blocks until all members have left.\n// Parameters:\n// client - the client\n// barrierPath - path to use\n// memberQty - the number of members in the barrier\npublic DistributedDoubleBarrier(CuratorFramework client, String barrierPath, int memberQty);\n"})}),"\n",(0,t.jsx)(r.h2,{id:"general-usage",children:"General Usage"}),"\n",(0,t.jsx)(r.p,{children:"To enter on the barrier:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"public void enter();\n"})}),"\n",(0,t.jsx)(r.p,{children:"To leave on the barrier:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"public void leave();\n"})}),"\n",(0,t.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(r.p,{children:["DistributedDoubleBarrier instances watch for connection loss and will throw an exception from ",(0,t.jsx)(r.code,{children:"enter()"})," and/or ",(0,t.jsx)(r.code,{children:"leave()"}),"."]})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},6413:(e,r,i)=>{i.d(r,{R:()=>s,x:()=>l});var n=i(8101);const t={},a=n.createContext(t);function s(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);